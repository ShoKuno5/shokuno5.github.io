---
export interface Props {
  correctPassword: string;
}

const { correctPassword } = Astro.props;

// Use the prop to avoid TS unused warnings and allow simple configuration.
const expectedHashLength = correctPassword?.length ?? 0;
---

<style>
  .pp-container {
    max-width: 42rem;
    margin: 2rem auto;
    padding: 1.5rem;
    border: 1px solid rgba(0,0,0,0.08);
    border-radius: 0.75rem;
    background: #ffffff;
  }
  .pp-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
  }
  .pp-desc { color: #6b7280; font-size: 0.95rem; margin-bottom: 1rem; }
  .pp-row { display: flex; gap: 0.5rem; }
  .pp-input {
    flex: 1;
    border: 1px solid rgba(0,0,0,0.12);
    border-radius: 0.5rem;
    padding: 0.6rem 0.75rem;
    font-size: 0.95rem;
  }
  .pp-btn {
    padding: 0.6rem 0.9rem;
    border-radius: 0.5rem;
    background: #111827;
    color: #fff;
    border: none;
    cursor: pointer;
  }
  .pp-error { color: #b91c1c; font-size: 0.9rem; margin-top: 0.5rem; display: none; }
  .hidden { display: none; }
  .pp-help { color: #94a3b8; font-size: 0.8rem; margin-top: 0.75rem; }
  .pp-content { margin-top: 1rem; }
  .pp-note { color: #64748b; font-size: 0.8rem; margin-top: 0.5rem; }
  .pp-ok { color: #059669; font-size: 0.9rem; margin-top: 0.5rem; display: none; }
  .pp-meta { color: #94a3b8; font-size: 0.75rem; }
  .pp-sr { position: absolute; left: -10000px; top: auto; width: 1px; height: 1px; overflow: hidden; }
  .pp-footer { margin-top: 0.5rem; display: flex; justify-content: space-between; align-items: center; }
  .pp-checkbox { display: inline-flex; align-items: center; gap: 0.5rem; font-size: 0.85rem; color: #64748b; }
  .pp-checkbox input { width: 1rem; height: 1rem; }
  .pp-ruler { height: 1px; background: rgba(0,0,0,0.06); margin: 1rem 0; }
</style>

<div id="pp" class="pp-container" data-unlocked="false">
  <div id="pp-form">
    <div class="pp-title">Protected Content</div>
    <div class="pp-desc">Enter the password to view this page.</div>
    <form id="pp-login" action="javascript:void(0);">
      <div class="pp-row">
        <label class="pp-sr" for="pp-password">Password</label>
        <input id="pp-password" class="pp-input" type="password" placeholder="Password" autocomplete="current-password" />
        <button class="pp-btn" type="submit">Unlock</button>
      </div>
      <div id="pp-error" class="pp-error">Incorrect password. Please try again.</div>
      <div id="pp-ok" class="pp-ok">Unlocked. Loading contentâ€¦</div>
      <div class="pp-footer">
        <label class="pp-checkbox"><input id="pp-remember" type="checkbox" /> Remember on this device</label>
        <span class="pp-meta">Hash length: {expectedHashLength}</span>
      </div>
      <div class="pp-note">Note: Client-side protection is not a security boundary.</div>
      <div class="pp-ruler"></div>
      <div class="pp-help">If you forget the password, contact the site owner.</div>
    </form>
  </div>
  <div id="pp-content" class="pp-content hidden">
    <slot />
  </div>
</div>

<script is:inline>
  (function () {
    const STORAGE_KEY = 'pp-unlocked-v1';
    const form = document.getElementById('pp-login');
    const passInput = document.getElementById('pp-password');
    const remember = document.getElementById('pp-remember');
    const errorEl = document.getElementById('pp-error');
    const okEl = document.getElementById('pp-ok');
    const content = document.getElementById('pp-content');
    const formWrap = document.getElementById('pp-form');

    const expected = `${correctPassword}`.toLowerCase();
    const hasHash = expected && expected.length === 64 && /^[0-9a-f]+$/.test(expected);

    function showContent() {
      errorEl && (errorEl.style.display = 'none');
      okEl && (okEl.style.display = 'none');
      formWrap && (formWrap.classList.add('hidden'));
      content && (content.classList.remove('hidden'));
      try { localStorage.setItem(STORAGE_KEY, '1'); } catch (e) {}
    }

    try {
      if (localStorage.getItem(STORAGE_KEY) === '1') {
        showContent();
        return;
      }
    } catch (e) {}

    async function hashOnce(input) {
      const enc = new TextEncoder();
      const data = enc.encode(input);
      const buf = await crypto.subtle.digest('SHA-256', data);
      const arr = Array.from(new Uint8Array(buf));
      return arr.map(b => b.toString(16).padStart(2, '0')).join('');
    }

    async function iterativeHash(input, rounds) {
      let out = input;
      for (let i = 0; i < rounds; i++) {
        out = await hashOnce(out);
      }
      return out;
    }

    form?.addEventListener('submit', async function () {
      errorEl && (errorEl.style.display = 'none');
      okEl && (okEl.style.display = 'none');

      const raw = String(passInput?.value || '');

      // Development bypass to avoid lockout during build previews
      if (import.meta && import.meta.env && import.meta.env.MODE === 'development') {
        showContent();
        return;
      }

      try {
        let candidate = raw;
        if (hasHash) {
          // If a hash was provided, try to match 5000-round hash (no salt here)
          candidate = await iterativeHash(candidate, 5000);
        }

        if ((hasHash && candidate.toLowerCase() === expected) || (!hasHash && raw === expected)) {
          okEl && (okEl.style.display = 'block');
          setTimeout(() => showContent(), 400);
        } else {
          errorEl && (errorEl.style.display = 'block');
        }
      } catch (e) {
        errorEl && (errorEl.style.display = 'block');
      }
    });
  })();
  </script>

