---
import { getNav } from '../config/site.js';
type NavItem = { label: string; href: string; external?: boolean };
// Single-language (English)
const nav: NavItem[] = getNav();
---

<div class="side-menu-wrapper" aria-hidden="false">
  <div class="side-menu-trigger" aria-hidden="true"></div>
  <nav class="side-menu" aria-label="Primary">
    <ul class="side-menu-list">
      {nav.map((item: NavItem) => (
        <li>
          <a href={item.href} class="side-menu-link">
            {item.label}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</div>

<style>
  .side-menu-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 260px; /* contains trigger and panel space */
    z-index: 1100;
    pointer-events: none; /* allow children to opt-in */
  }

  .side-menu-trigger {
    position: fixed;
    top: 0;
    left: 0;
    width: 14px; /* hover hotspot */
    height: 100vh;
    pointer-events: auto;
  }

  .side-menu {
    position: fixed;
    top: 50%;
    left: 0;
    transform: translate(-252px, -50%);
    width: 240px;
    max-height: calc(100vh - 40px);
    overflow: auto;
    background: rgba(255, 255, 255, 0.96);
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    border: 1px solid rgba(0, 0, 0, 0.06);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.18);
    border-radius: 14px;
    padding: 12px;
    pointer-events: auto; /* interactive */
    transition: transform 220ms cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Reveal on hover of edge or panel */
  .side-menu-wrapper.enabled .side-menu-trigger:hover ~ .side-menu,
  .side-menu-wrapper.enabled .side-menu:hover {
    transform: translate(0, -50%);
  }

  .side-menu-list {
    list-style: none;
    margin: 0;
    padding: 6px;
    display: grid;
    gap: 6px;
  }

  .side-menu-link {
    display: block;
    text-decoration: none;
    color: #374151;
    background: linear-gradient(180deg, rgba(248,250,252,0.9), rgba(255,255,255,0.9));
    border: 1px solid rgba(0,0,0,0.06);
    border-radius: 10px;
    padding: 10px 12px;
    font-weight: 600;
    font-size: 0.95rem;
    letter-spacing: 0.1px;
    transition: transform 120ms ease, background-color 120ms ease, color 120ms ease, border-color 120ms ease;
    text-align: left;
  }

  .side-menu-link:hover,
  .side-menu-link:focus-visible {
    outline: none;
    color: #0b6bdc;
    background: #f8fafc;
    border-color: rgba(11,107,220,0.25);
    transform: translateX(2px);
  }

  /* Even treatment: same visual weight and spacing for all items */
  .side-menu-list > li { min-height: 0; }

  /* Hide side menu on small screens; use header/hamburger instead */
  @media (max-width: 1023px) {
    .side-menu-wrapper { display: none; }
  }

  /* Disable interactions when not at top */
  .side-menu-wrapper:not(.enabled) .side-menu-trigger { display: none; }
  .side-menu-wrapper:not(.enabled) .side-menu { pointer-events: none; }
</style>

<script is:inline>
  // Optional: also reveal when mouse moves near left edge without hovering the trigger yet
  (function(){
    const panel = document.querySelector('.side-menu');
    const wrapper = document.querySelector('.side-menu-wrapper');
    if(!panel || !wrapper) return;
    let revealTimeout = null;
    let hideTimeout = null;

    const show = () => {
      panel.style.transform = 'translate(0, -50%)';
    };
    const hide = () => {
      panel.style.transform = 'translate(-252px, -50%)';
    };

    const updateEnabled = () => {
      const atTop = window.scrollY <= 0;
      if (atTop) {
        wrapper.classList.add('enabled');
      } else {
        wrapper.classList.remove('enabled');
        hide();
      }
    };

    // Initial state
    updateEnabled();
    window.addEventListener('scroll', updateEnabled, { passive: true });

    // Reveal when cursor is near left edge (only when at top)
    window.addEventListener('mousemove', (e) => {
      if (window.innerWidth <= 1023) return; // respect mobile
      if (!wrapper.classList.contains('enabled')) return;
      if (e.clientX <= 24) {
        if (hideTimeout) { clearTimeout(hideTimeout); hideTimeout = null; }
        if (!revealTimeout) revealTimeout = setTimeout(() => { show(); revealTimeout = null; }, 40);
      } else if (!panel.matches(':hover')) {
        if (revealTimeout) { clearTimeout(revealTimeout); revealTimeout = null; }
        if (!hideTimeout) hideTimeout = setTimeout(() => { hide(); hideTimeout = null; }, 250);
      }
    });
  })();
</script>
