---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { getGitDatesForContentSync } from '../../../utils/gitDatesOptimized';
import { extractDateFromFilename } from '../../../utils/extractDateFromFilename';

const posts = await getCollection('posts', ({ id }) => id.startsWith('ja/'));
const visiblePosts = posts.filter(post => !post.data.hidden);

// Enhance posts with git dates
const postsWithDates = visiblePosts.map(post => {
  const gitDates = getGitDatesForContentSync('posts', post.slug);
  const filenameDate = extractDateFromFilename(post.slug);
  
  // Priority: frontmatter date > filename date > git created date
  const publishDate = post.data.date || filenameDate || gitDates?.created || new Date();
  
  // For modified date, always use git modified if it exists and is different
  let modifiedDate = post.data.modified;
  if (!modifiedDate && gitDates?.modified) {
    if (gitDates.modified.getTime() !== publishDate.getTime()) {
      modifiedDate = gitDates.modified;
    }
  }
  
  return {
    ...post,
    computedDates: {
      published: publishDate,
      modified: modifiedDate
    }
  };
});

const sortedPosts = postsWithDates.sort((a, b) => b.computedDates.published.getTime() - a.computedDates.published.getTime());

// Group posts by year
const postsByYear = sortedPosts.reduce((acc, post) => {
  const year = post.computedDates.published.getFullYear();
  if (!acc[year]) acc[year] = [];
  acc[year].push(post);
  return acc;
}, {} as Record<number, typeof postsWithDates>);

const years = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<Layout title="すべての投稿" description="すべてのブログ投稿のアーカイブ">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 lg:py-16">
    <h1 class="text-4xl lg:text-5xl font-bold mb-12 bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">すべての投稿</h1>
    
    {years.map((year) => (
      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-6 text-gray-800 border-b border-gray-200 pb-2">{year}年</h2>
        <ul class="space-y-4">
          {postsByYear[Number(year)].map((post) => (
            <li class="group">
              <a 
                href={`/ja/posts/${post.slug.replace('ja/', '')}/`}
                class="flex items-start sm:items-center gap-4 p-4 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <div class="flex-grow">
                  <h3 class="font-medium text-gray-900 group-hover:text-primary-600 transition-colors">
                    {post.data.title}
                  </h3>
                  {post.data.summary && (
                    <p class="text-sm text-gray-600 mt-1">{post.data.summary}</p>
                  )}
                </div>
                <div class="flex flex-col items-end text-sm text-gray-500 font-medium flex-shrink-0">
                  <time>
                    {post.computedDates.published.toLocaleDateString('ja-JP', { year: 'numeric', month: 'short', day: 'numeric' })}
                  </time>
                  {post.computedDates.modified && (
                    <time class="text-xs opacity-70">
                      (更新: {post.computedDates.modified.toLocaleDateString('ja-JP', { year: 'numeric', month: 'short', day: 'numeric' })})
                    </time>
                  )}
                </div>
              </a>
            </li>
          ))}
        </ul>
      </section>
    ))}
  </div>
</Layout>
