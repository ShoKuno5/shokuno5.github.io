---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { getGitDatesForContentSync } from '../../../utils/gitDatesOptimized';
import { extractDateFromFilename } from '../../../utils/extractDateFromFilename';

const posts = await getCollection('posts', ({ id }) => id.startsWith('ja/'));
const visiblePosts = posts.filter(post => !post.data.hidden);

// Collect all unique tags
const tagMap = new Map<string, typeof visiblePosts>();

visiblePosts.forEach(post => {
  if (post.data.tags) {
    post.data.tags.forEach(tag => {
      const normalizedTag = tag.toLowerCase();
      if (!tagMap.has(normalizedTag)) {
        tagMap.set(normalizedTag, []);
      }
      tagMap.get(normalizedTag)!.push(post);
    });
  }
});

// Sort tags alphabetically
const sortedTags = Array.from(tagMap.entries()).sort((a, b) => a[0].localeCompare(b[0]));

// Sort posts within each tag by date with proper priority
sortedTags.forEach(([_, tagPosts]) => {
  tagPosts.sort((a, b) => {
    const aFilenameDate = extractDateFromFilename(a.slug);
    const bFilenameDate = extractDateFromFilename(b.slug);
    const aDate = a.data.date || aFilenameDate || getGitDatesForContentSync('posts', a.slug)?.created || new Date(0);
    const bDate = b.data.date || bFilenameDate || getGitDatesForContentSync('posts', b.slug)?.created || new Date(0);
    return bDate.getTime() - aDate.getTime();
  });
});
---

<Layout title="すべてのタグ" description="タグで投稿を探す">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 lg:py-16">
    <h1 class="text-4xl lg:text-5xl font-bold mb-12 bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">すべてのタグ</h1>
    
    <!-- Tag cloud -->
    <nav class="mb-16 p-8 bg-gradient-to-br from-primary-50 to-accent-purple/5 rounded-xl border border-primary-100">
      <h2 class="text-xl font-semibold mb-6 text-gray-800">タグにジャンプ:</h2>
      <div class="flex flex-wrap gap-3">
        {sortedTags.map(([tag, tagPosts]) => (
          <a 
            href={`#tag-${tag.replace(/\s+/g, '-')}`}
            class="inline-flex items-center px-4 py-2 bg-white border border-primary-200 rounded-full text-sm font-medium text-primary-700 hover:bg-primary-50 hover:border-primary-300 transition-all duration-200 shadow-sm"
          >
            {tag} <span class="ml-2 px-2 py-0.5 bg-primary-100 text-primary-600 rounded-full text-xs">{tagPosts.length}</span>
          </a>
        ))}
      </div>
    </nav>
    
    <!-- Posts by tag -->
    <div class="space-y-12">
      {sortedTags.map(([tag, tagPosts]) => (
        <section id={`tag-${tag.replace(/\s+/g, '-')}`} class="scroll-mt-8">
          <h2 class="text-2xl font-semibold mb-6 text-gray-800 border-b border-gray-200 pb-3">
            <span class="bg-gradient-to-r from-primary-600 to-accent-purple bg-clip-text text-transparent">{tag}</span>
            <span class="text-sm font-normal text-gray-500 ml-3">({tagPosts.length} 投稿)</span>
          </h2>
          <ul class="space-y-4">
            {tagPosts.map((post) => (
              <li class="group">
                <a 
                  href={`/ja/posts/${post.slug.replace('ja/', '')}/`}
                  class="flex items-start sm:items-center gap-4 p-4 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <div class="flex-grow">
                    <h3 class="font-medium text-gray-900 group-hover:text-primary-600 transition-colors">
                      {post.data.title}
                    </h3>
                    {post.data.summary && (
                      <p class="text-sm text-gray-600 mt-1">{post.data.summary}</p>
                    )}
                  </div>
                  <div class="flex flex-col items-end text-sm text-gray-500 font-medium flex-shrink-0">
                    <time>
                      {(post.data.date || extractDateFromFilename(post.slug) || getGitDatesForContentSync('posts', post.slug)?.created || new Date()).toLocaleDateString('ja-JP', { year: 'numeric', month: 'short', day: 'numeric' })}
                    </time>
                    {(() => {
                      const gitDates = getGitDatesForContentSync('posts', post.slug);
                      const filenameDate = extractDateFromFilename(post.slug);
                      const publishDate = post.data.date || filenameDate || gitDates?.created || new Date();
                      let modifiedDate = post.data.modified;
                      if (!modifiedDate && gitDates?.modified) {
                        if (gitDates.modified.getTime() !== publishDate.getTime()) {
                          modifiedDate = gitDates.modified;
                        }
                      }
                      return modifiedDate && (
                        <time class="text-xs opacity-70">
                          (更新: {modifiedDate.toLocaleDateString('ja-JP', { year: 'numeric', month: 'short', day: 'numeric' })})
                        </time>
                      );
                    })()}
                  </div>
                </a>
              </li>
            ))}
          </ul>
          <div class="mt-6">
            <a href="#" class="inline-flex items-center text-sm text-primary-600 hover:text-primary-700 transition-colors">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
              </svg>
              トップに戻る
            </a>
          </div>
        </section>
      ))}
    </div>
  </div>
</Layout>

<style>
  html {
    scroll-behavior: smooth;
  }
</style>
