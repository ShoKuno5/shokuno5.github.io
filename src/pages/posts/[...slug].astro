---
import { getCollection } from 'astro:content';
import PostLayout from '../../layouts/PostLayout.astro';
import PostLayoutWithCitations from '../../layouts/PostLayoutWithCitations.astro';
import AcademicLayout from '../../layouts/AcademicLayout.astro';
import { getGitDatesForContentSync } from '../../utils/gitDatesOptimized';
import { extractDateFromFilename } from '../../utils/extractDateFromFilename';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post) => {
    // Handle both old flat structure and new en/ja structure
    const slug = post.slug.startsWith('en/') ? post.slug.slice(3) : post.slug;
    return {
      params: { slug },
      props: { post },
    };
  });
}

const { post } = Astro.props;
const { Content } = await post.render();

// Get dates with proper priority
const gitDates = getGitDatesForContentSync('posts', post.slug);
const filenameDate = extractDateFromFilename(post.slug);

// Priority: frontmatter pubDate/date > filename date > git created date
const publishDate = post.data.pubDate || post.data.date || filenameDate || gitDates?.created || new Date();

// For modified date, always use git modified if it exists and is different
let modifiedDate = post.data.modified;
if (!modifiedDate && gitDates?.modified) {
  // Always show git modified date if it's different from published date
  if (gitDates.modified.getTime() !== publishDate.getTime()) {
    modifiedDate = gitDates.modified;
  }
}

// Determine which layout to use based on frontmatter and content
const useAcademicLayout = post.data.type === 'academic';
// Check if post content contains citations (check raw markdown)
const contentHasCitations = post.body.includes('cite{') || post.body.includes('\\cite{');
// Use citations layout when citations are detected
const useCitationsLayout = contentHasCitations;

let LayoutComponent = PostLayout;
if (useCitationsLayout) {
  // Citations take priority over academic layout for proper processing
  LayoutComponent = PostLayoutWithCitations;
} else if (useAcademicLayout) {
  LayoutComponent = AcademicLayout;
}
---

{useCitationsLayout ? (
  <PostLayoutWithCitations
    title={post.data.title} 
    date={publishDate}
    modified={modifiedDate}
    tags={post.data.tags}
    description={post.data.description || post.data.summary}
    content={post.body}
  >
    <Content />
  </PostLayoutWithCitations>
) : useAcademicLayout ? (
  <AcademicLayout
    title={post.data.title}
    description={post.data.description || post.data.summary}
    date={publishDate}
    tags={post.data.tags}
    author={post.data.author}
  >
    <Content />
  </AcademicLayout>
) : (
  <PostLayout
    title={post.data.title} 
    date={publishDate}
    modified={modifiedDate}
    tags={post.data.tags}
    description={post.data.description || post.data.summary}
  >
    <Content />
  </PostLayout>
)}
